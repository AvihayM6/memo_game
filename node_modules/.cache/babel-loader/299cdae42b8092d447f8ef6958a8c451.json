{"ast":null,"code":"var _jsxFileName = \"/home/avihay/Desktop/memo_game/src/Components/TwoOnTwoGame.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport SingleCard from './SingleCard';\nimport '../Styles/TwoOnTwoGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/potion-1.png\",\n  matched: false\n}];\n\nconst TwoOnTwoGame = () => {\n  _s();\n\n  const [cards, setCards] = useState([]); // eslint-disable-next-line no-unused-vars\n\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false); //shuffled the card array\n\n  const shuffleCards = () => {\n    const tempShuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(tempShuffledCards);\n    setTurns(0);\n  };\n\n  const handleChoice = card => {\n    //if choiceOne is null(false) set choiceOne to  be the card\n    //else set choiceTwo to be the card\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceTwo.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurns();\n      } else {\n        setTimeout(() => resetTurns(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prev => prev + 1);\n    setDisabled(false);\n  };\n\n  const resetGame = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(0);\n    setDisabled(false);\n    shuffleCards();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonsTeam\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: shuffleCards,\n        children: \" New game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        disabled: true,\n        children: \" Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-grid\",\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n          card: card,\n          handleChoice: handleChoice,\n          flipped: card === choiceOne || card === choiceTwo || card.matched,\n          disabled: disabled\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"turns\",\n      children: [\"Turns: \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TwoOnTwoGame, \"zpj1OC3lPd52QG2dCYHCz30icbw=\");\n\n_c = TwoOnTwoGame;\nexport default TwoOnTwoGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TwoOnTwoGame\");","map":{"version":3,"sources":["/home/avihay/Desktop/memo_game/src/Components/TwoOnTwoGame.js"],"names":["useState","useEffect","SingleCard","cardImages","matched","TwoOnTwoGame","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","tempShuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurns","setTimeout","prev","resetGame"],"mappings":"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","sourcesContent":["import { useState, useEffect} from 'react';\nimport SingleCard from './SingleCard';\nimport '../Styles/TwoOnTwoGame.css';\n\n\n\n\nconst cardImages = [{ \"src\": \"/img/helmet-1.png\", matched: false },\n                    { \"src\": \"/img/potion-1.png\", matched: false }];\n\n\n  const TwoOnTwoGame = () => {\n\n    const [cards, setCards] = useState([]);\n    // eslint-disable-next-line no-unused-vars\n    const [turns, setTurns] = useState(0);\n    const [choiceOne, setChoiceOne] = useState(null);\n    const [choiceTwo, setChoiceTwo] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n\n    //shuffled the card array\n    const shuffleCards = () => {\n        const tempShuffledCards = [...cardImages, ...cardImages]\n          .sort(() => Math.random() - 0.5)\n          .map(card => ({ ...card, id: Math.random() }))\n        setChoiceOne(null);  \n        setChoiceTwo(null);  \n        setCards(tempShuffledCards)\n        setTurns(0)\n      }\n\n    const handleChoice = (card) => {\n      //if choiceOne is null(false) set choiceOne to  be the card\n      //else set choiceTwo to be the card\n      choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    }\n\n    useEffect(() => {\n      if(choiceOne && choiceTwo){\n        setDisabled(true);\n        if(choiceOne.src === choiceTwo.src){\n          setCards( (prevCards) => {\n            return prevCards.map((card) => {\n              if(card.src === choiceTwo.src){\n                return {...card, matched: true}\n              }\n              else{\n                return card;\n              }\n            })\n        });\n          resetTurns();\n        }\n        else{\n          setTimeout(() =>resetTurns(), 1000);\n        }\n      }\n    }, [choiceOne, choiceTwo]);\n\n\n    useEffect(() => {\n      shuffleCards();\n    }, [])\n\n\n    const resetTurns = () => {\n      setChoiceOne(null);\n      setChoiceTwo(null);\n      setTurns((prev) => prev+1)\n      setDisabled(false);\n    }\n\n    const resetGame = () =>{\n      setChoiceOne(null);\n      setChoiceTwo(null);\n      setTurns(0);\n      setDisabled(false);\n      shuffleCards();\n    }\n\n    return ( \n        <div>\n          <div className=\"buttonsTeam\">\n            <button onClick={shuffleCards}> New game</button>\n            <button onClick={resetGame} disabled> Reset</button>\n          </div>\n            <div className=\"board\">\n                <div className=\"card-grid\">\n                  {cards.map((card) => (\n                    <SingleCard \n                              key={card.id} \n                              card={card}\n                              handleChoice={handleChoice}\n                              flipped={card === choiceOne || card === choiceTwo || card.matched}\n                               disabled={disabled}\n                    />\n                  ))}\n                </div>\n            </div>\n            <p className=\"turns\">Turns: {turns}</p>\n        </div>\n     );\n}\n \nexport default TwoOnTwoGame;"]},"metadata":{},"sourceType":"module"}